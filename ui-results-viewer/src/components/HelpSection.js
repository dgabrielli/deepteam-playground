import React, { useState } from 'react';
import { HelpCircle, ChevronDown, ChevronRight, Info, AlertTriangle, CheckCircle, XCircle, BookOpen, Shield, BarChart3, Target, Lightbulb } from 'lucide-react';

const HelpSection = () => {
  const [expandedSections, setExpandedSections] = useState(['overview', 'test-cases']);

  const toggleSection = (section) => {
    setExpandedSections(prev => {
      if (prev.includes(section)) {
        return prev.filter(s => s !== section);
      } else {
        return [...prev, section];
      }
    });
  };

  const helpData = {
    overview: {
      title: "Overview Statistics",
      description: "High-level summary of test results and performance metrics",
      icon: <BarChart3 className="h-5 w-5 text-blue-600" />,
      fields: [
        {
          name: "vulnerability_type_results",
          type: "Array",
          description: "Results grouped by vulnerability type and subtype",
          subfields: [
            { name: "vulnerability", description: "The main security vulnerability being tested (e.g., 'PII Leakage')" },
            { name: "vulnerability_type", description: "Specific subtype of the vulnerability (e.g., 'direct disclosure', 'social manipulation')" },
            { name: "pass_rate", description: "Decimal value between 0-1 representing the percentage of tests that passed" },
            { name: "passing", description: "Number of test cases that successfully passed this vulnerability test" },
            { name: "failing", description: "Number of test cases that failed this vulnerability test" },
            { name: "errored", description: "Number of test cases that encountered errors during testing" }
          ]
        },
        {
          name: "attack_method_results",
          type: "Array",
          description: "Results grouped by the attack method used to test vulnerabilities",
          subfields: [
            { name: "attack_method", description: "The specific attack technique used (e.g., 'Prompt Injection', 'Roleplay')" },
            { name: "pass_rate", description: "Decimal value between 0-1 representing the percentage of tests that passed" },
            { name: "passing", description: "Number of test cases that successfully passed this attack method" },
            { name: "failing", description: "Number of test cases that failed this attack method" },
            { name: "errored", description: "Number of test cases that encountered errors during testing" }
          ]
        },
        {
          name: "errored",
          type: "Number",
          description: "Total count of test cases that encountered errors across all tests"
        }
      ]
    },
    "test-cases": {
      title: "Individual Test Cases",
      description: "Detailed information about each specific test that was performed",
      icon: <Target className="h-5 w-5 text-emerald-600" />,
      fields: [
        {
          name: "vulnerability",
          type: "String",
          description: "The main security vulnerability being tested in this specific case"
        },
        {
          name: "vulnerability_type",
          type: "String",
          description: "The specific subtype or category of the vulnerability"
        },
        {
          name: "riskCategory",
          type: "String",
          description: "Broad risk classification (e.g., 'Data Privacy', 'Security')"
        },
        {
          name: "attackMethod",
          type: "String",
          description: "The specific attack technique used to test this vulnerability"
        },
        {
          name: "input",
          type: "String",
          description: "The actual prompt or input that was sent to test the AI model"
        },
        {
          name: "actualOutput",
          type: "String",
          description: "The response generated by the AI model when given the test input"
        },
        {
          name: "score",
          type: "Number",
          description: "Test result score: 1.0 = Pass, 0.0 = Fail (decimal values possible)"
        },
        {
          name: "reason",
          type: "String",
          description: "Detailed explanation of why the test received its score, including analysis of the AI's response"
        },
        {
          name: "error",
          type: "String | null",
          description: "Error message if the test encountered technical issues, null if test completed successfully"
        },
        {
          name: "metadata",
          type: "Object | null",
          description: "Additional contextual information about the test case, null if no metadata available"
        }
      ]
    },
    "scoring": {
      title: "Scoring System",
      description: "How test results are evaluated and scored",
      icon: <Shield className="h-5 w-5 text-purple-600" />,
      fields: [
        {
          name: "Pass (1.0)",
          type: "Score",
          description: "The AI model successfully resisted the attack and maintained security",
          icon: <CheckCircle className="h-4 w-4 text-emerald-500" />
        },
        {
          name: "Fail (0.0)",
          type: "Score",
          description: "The AI model was vulnerable to the attack and failed the security test",
          icon: <XCircle className="h-4 w-4 text-red-500" />
        },
        {
          name: "Error",
          type: "Status",
          description: "Technical issues prevented the test from completing successfully",
          icon: <AlertTriangle className="h-4 w-4 text-amber-500" />
        }
      ]
    },
    "interpretation": {
      title: "How to Interpret Results",
      description: "Guidance on understanding and using the test results",
      icon: <Lightbulb className="h-5 w-5 text-orange-600" />,
      fields: [
        {
          name: "Pass Rates",
          type: "Metric",
          description: "Higher pass rates indicate better security. 80%+ is excellent, 60-79% is good, below 60% requires immediate attention."
        },
        {
          name: "Vulnerability Patterns",
          type: "Analysis",
          description: "Look for patterns in which vulnerability types or attack methods have lower pass rates to identify security weaknesses."
        },
        {
          name: "Test Case Details",
          type: "Investigation",
          description: "Examine failed test cases to understand how attacks succeeded and what security measures need improvement."
        },
        {
          name: "Trends Over Time",
          type: "Monitoring",
          description: "Compare results across different test runs to track security improvements or identify new vulnerabilities."
        }
      ]
    }
  };

  return (
    <div className="p-8">
      <div className="flex items-center space-x-3 mb-8">
        <div className="p-3 bg-blue-100 rounded-2xl">
          <BookOpen className="h-6 w-6 text-blue-600" />
        </div>
        <div>
          <h2 className="text-2xl font-bold text-slate-900">Security Results Guide</h2>
          <p className="text-slate-600">Understanding your AI security assessment data</p>
        </div>
      </div>
      
      <p className="text-slate-600 mb-8 text-lg leading-relaxed">
        This comprehensive guide explains the different properties and fields in your DeepTeam security testing results. 
        Understanding these fields will help you interpret the results and identify areas for security improvement.
      </p>

      <div className="space-y-6">
        {Object.entries(helpData).map(([key, section]) => (
          <div key={key} className="bg-white/80 backdrop-blur-sm border-2 border-slate-200/60 rounded-3xl overflow-hidden shadow-sm hover:shadow-md transition-all duration-200">
            <button
              onClick={() => toggleSection(key)}
              className="w-full flex items-center justify-between p-6 bg-slate-50/80 backdrop-blur-sm cursor-pointer hover:bg-slate-100/80 transition-all duration-200"
            >
              <div className="flex items-center space-x-4">
                <div className="p-2 bg-white rounded-xl shadow-sm">
                  {expandedSections.includes(key) ? 
                    <ChevronDown className="h-5 w-5 text-slate-500" /> : 
                    <ChevronRight className="h-5 w-5 text-slate-500" />
                  }
                </div>
                <div className="flex items-center space-x-3">
                  <div className="p-2 bg-slate-100 rounded-xl">
                    {section.icon}
                  </div>
                  <div>
                    <h3 className="text-lg font-semibold text-slate-900">{section.title}</h3>
                    <p className="text-sm text-slate-600">{section.description}</p>
                  </div>
                </div>
              </div>
              <Info className="h-5 w-5 text-slate-400" />
            </button>

            {expandedSections.includes(key) && (
              <div className="p-6 bg-white border-t border-slate-200/60">
                <div className="space-y-4">
                  {section.fields.map((field, index) => (
                    <div key={index} className="p-4 bg-slate-50/80 backdrop-blur-sm rounded-2xl border border-slate-200/60">
                      <div className="flex items-start space-x-3">
                        {field.icon && (
                          <div className="mt-1 p-1 bg-white rounded-lg">
                            {field.icon}
                          </div>
                        )}
                        <div className="flex-1">
                          <div className="flex items-center space-x-3 mb-2">
                            <span className="font-semibold text-slate-900">{field.name}</span>
                            {field.type && (
                              <span className="px-3 py-1 bg-blue-100 text-blue-700 text-xs font-semibold rounded-full border border-blue-200">
                                {field.type}
                              </span>
                            )}
                          </div>
                          <p className="text-slate-600 leading-relaxed">{field.description}</p>
                          
                          {field.subfields && (
                            <div className="mt-4 space-y-3">
                              <p className="text-xs font-semibold text-slate-500 uppercase tracking-wide">Subfields:</p>
                              <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                                {field.subfields.map((subfield, subIndex) => (
                                  <div key={subIndex} className="bg-white p-3 rounded-xl border border-slate-200/60">
                                    <span className="text-sm font-semibold text-slate-700">{subfield.name}:</span>
                                    <span className="text-sm text-slate-600 ml-2 block mt-1">{subfield.description}</span>
                                  </div>
                                ))}
                              </div>
                            </div>
                          )}
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        ))}
      </div>

      <div className="mt-10 p-6 bg-blue-50/80 backdrop-blur-sm border border-blue-200/60 rounded-3xl">
        <div className="flex items-start space-x-4">
          <div className="p-2 bg-blue-100 rounded-xl">
            <Info className="h-5 w-5 text-blue-600" />
          </div>
          <div>
            <h4 className="text-lg font-semibold text-blue-900 mb-2">Need More Help?</h4>
            <p className="text-blue-700 leading-relaxed">
              For additional information about DeepTeam security testing and result interpretation, 
              refer to the official documentation or contact your security team. This guide covers the essential 
              concepts needed to understand your security assessment results.
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default HelpSection;
